#!/usr/bin/env python3
"""========================================================================
Purpose:
    The purpose of this script is to plot the Fourier transform and the
    inverse Fourier transform of a spectrally sharp filter.
 Author:
    Emilio Torres
========================================================================"""
#=========================================================================#
# Preamble                                                                #
#=========================================================================#
#-------------------------------------------------------------------------#
# Python packages                                                         #
#-------------------------------------------------------------------------#
import sys                                  # system commands
import os                                   # operating system commands
from subprocess import call                 # bash commands
import numpy as np                          # math operations
from matplotlib import pyplot as plt        # plotting commands
#-------------------------------------------------------------------------#
# User packages                                                           #
#-------------------------------------------------------------------------#
from mkdir_py       import mkdir_py         # making directory
#=========================================================================#
# User defined functions                                                  #
#=========================================================================#
#-------------------------------------------------------------------------#
# Pseudo spectrally sharp filter                                          #
#-------------------------------------------------------------------------#
def Gk(
        K):                                 # wave number

    """ Sharp spectral filter example """
    #---------------------------------------------------------------------#
    # Preallocating space                                                 #
    #---------------------------------------------------------------------#
    g   = np.zeros(len(K))
    #---------------------------------------------------------------------#
    # Making a pseudo spectrally sharp filter                             #
    #---------------------------------------------------------------------#
    for i in range(0, len(K)):
        if K[i] >= 0 and K[i] <= 30:
            g[i]    = 1.0
        else:
            g[i]    = 0.0

    return g
#-------------------------------------------------------------------------#
# Making the physical domain                                              #
#-------------------------------------------------------------------------#
def x_vec(
        K):                             # wave number

    """ Making a x-vector from the wave number """
    #---------------------------------------------------------------------#
    # Preallocating space                                                 #
    #---------------------------------------------------------------------#
    X   = np.zeros(len(K))
    #---------------------------------------------------------------------#
    # Making the physical x-vector                                        #
    #---------------------------------------------------------------------#
    for i in range(0, len(K)):
        X[i]    = 2*pi/K[i]

    return X
#-------------------------------------------------------------------------#
# Inverse Fourier Transform                                               #
#-------------------------------------------------------------------------#
def F_inv(
        K,                          # wave number
        X):                         # x vector

    """ Fourier inverse for a spectrally sharp filter """
    #---------------------------------------------------------------------#
    # Preallocating space                                                 #
    #---------------------------------------------------------------------#
    F   = np.zeros(len(X))
    Im  = 1j
    #---------------------------------------------------------------------#
    # Fourier inverse                                                     #
    #---------------------------------------------------------------------#
    for i in range(0, len(X)):
        if K[i] >= 0 and K[i] <= 30:
            F[i]    = -1/(Im * x[i])*( np.exp(-30*Im*x[i]) -1 )
        else:
            F[i]    = 0.0

    return F
#-------------------------------------------------------------------------#
# Wavenumer function                                                      #
#-------------------------------------------------------------------------#
def k_func(
        X):                 # x vector

    """ Generating the wavenumbers from the x domain """
    #---------------------------------------------------------------------#
    # Preallocating space                                                 #
    #---------------------------------------------------------------------#
    K       = np.zeros(len(X))
    #---------------------------------------------------------------------#
    # Making the physical x-vector                                        #
    #---------------------------------------------------------------------#
    for i in range(0, len(X)):
        K[i]    = 2*pi/X[i]

    return K

#=========================================================================#
# Main                                                                    #
#=========================================================================#
if __name__ == "__main__":
    #=====================================================================#
    # Main preamble                                                       #
    #=====================================================================#
    #---------------------------------------------------------------------#
    # Clearing the command window                                         #
    #---------------------------------------------------------------------#
    call(["clear"])
    #---------------------------------------------------------------------#
    # Plotting fonts                                                      #
    #---------------------------------------------------------------------#
    plt.rc('text', usetex=True)
    plt.rc('font', family='serif')
    #---------------------------------------------------------------------#
    # Making the directory                                                #
    #---------------------------------------------------------------------#
    sep     = os.sep
    loc     = "media"
    mkdir_py(loc)
    #=====================================================================#
    # Defining variables                                                  #
    #=====================================================================#
    pi      = np.pi                     # pi
    x       = np.linspace(1e-12, 2*pi, 1000)  # x vector
    k       = k_func(x)                 # wave number
    G       = Gk(k)                     # spectrally sharp filter
    x       = x_vec(k)                  # x vector
    Finv    = F_inv(k,x)                # inverse Fourier transform
    mkdir_py(loc)
    #=====================================================================#
    # Plotting solutions                                                  #
    #=====================================================================#
    #---------------------------------------------------------------------#
    # Spectrally sharp spectral filter                                    #
    #---------------------------------------------------------------------#
    plt.plot(k, G, 'r')                         # plotting Gk
    plt.xlim([0, 45])
    plt.xlabel("$0 \leq k \leq 45$")            # xlabel
    plt.ylabel("$ G(k) $")                      # ylabel
    plt.savefig(loc + sep + "Gk" + ".pdf")      # saving the figure
    plt.clf()
    #---------------------------------------------------------------------#
    # Fourier inverse 1                                                   #
    #---------------------------------------------------------------------#
    plt.plot(x, Finv, 'r', linewidth = 0.5)     # plotting Finv
    plt.xlabel("$0 \leq x \leq 2\pi$")          # x label
    plt.ylabel("$F(x)$")                        # y label
    plt.savefig(loc + sep + "Finv" + ".pdf")    # storing figure
    plt.clf()

    for i in range(0, len(k)):
        print("i = %i\t\tk = %.4f\n"       %(i, k[i]))

    #---------------------------------------------------------------------#
    # Fourier inverse 2                                                   #
    #---------------------------------------------------------------------#
    #plt.plot(x, Finv, 'r', linewidth = 0.5)             # plotting Finv
    #plt.xlabel("$-1 \leq x \leq 50$")                   # x label
    #plt.ylabel("$F(x)$")
    #plt.xlim([-1, 50])
    #plt.savefig(loc + sep + "Finv2" + ".pdf")
    #plt.clf()
    sys.exit(8)
